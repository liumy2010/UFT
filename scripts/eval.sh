python3 -m verl.trainer.main_eval \
data.train_files=$DATA_DIR/train.parquet \
data.val_files=$DATA_DIR/test.parquet \
data.train_batch_size=256 \
data.val_batch_size=1312 \
data.max_prompt_length=$MAX_PROMPT_LENGTH \
data.max_response_length=$MAX_RESPONSE_LENGTH \
actor_rollout_ref.model.path=$BASE_MODEL \
actor_rollout_ref.model.enable_gradient_checkpointing=True \
actor_rollout_ref.actor.optim.lr=1e-6 \
actor_rollout_ref.actor.ppo_mini_batch_size=$PPO_MINIBATCH \
actor_rollout_ref.actor.ppo_micro_batch_size=$PPO_MICROBATCH \
actor_rollout_ref.actor.use_kl_loss=$USE_KL_LOSS \
+actor_rollout_ref.actor.sft_loss_coef=$SFT_LOSS_COEF \
actor_rollout_ref.rollout.log_prob_micro_batch_size=$ROLLOUT_LOGPROB_MICROBATCH \
actor_rollout_ref.rollout.tensor_model_parallel_size=$ROLLOUT_TP_SIZE \
actor_rollout_ref.rollout.gpu_memory_utilization=0.4 \
actor_rollout_ref.rollout.n=$ROLLOUT_N \
actor_rollout_ref.ref.log_prob_micro_batch_size=$REF_LOGPROB_MICROBATCH \
critic.optim.lr=1e-5 \
critic.model.path=$BASE_MODEL \
critic.ppo_micro_batch_size=$CRITIC_MICROBATCH \
algorithm.kl_ctrl.kl_coef=0.001 \
algorithm.adv_estimator=$ADV_ESTIMATOR \
trainer.seed=$SEED \
trainer.logger=[] \
+trainer.val_before_train=True \
trainer.default_hdfs_dir=null \
trainer.n_gpus_per_node=$N_GPUS \
trainer.nnodes=1 \
trainer.save_freq=100 \
trainer.test_freq=25 \
trainer.total_training_steps=$TOTAL_TRAINING_STEPS \
trainer.total_training_steps_hint=$TOTAL_TRAINING_STEPS_HINT \
+trainer.uniform_sampling=$UNIFORM_SAMPLING \
trainer.project_name=UFT \
trainer.experiment_name=$EXPERIMENT_NAME \
trainer.lower_prob=$LOWER_PROB \
trainer.upper_prob=$UPPER_PROB \
trainer.total_epochs=30000 2>&1 | tee verl_demo.log
